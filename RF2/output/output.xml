<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 5.0.1 (Python 3.10.4 on linux)" generated="20220619 19:37:45.381" rpa="false" schemaversion="3">
<suite id="s1" name="RF2" source="/home/andrey/PycharmProjects/Robot_first_homework/RF2">
<suite id="s1-s1" name="Test Search Many Tables" source="/home/andrey/PycharmProjects/Robot_first_homework/RF2/test_search_many_tables.robot">
<test id="s1-s1-t1" name="Check search from mulptiple tables" line="15">
<kw name="Test Setup" library="resource" type="SETUP">
<kw name="Create Session" library="Req">
<arg>alias</arg>
<arg>http://localhost:3000</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20220619 19:37:45.820" level="INFO">Creating Session using : alias=alias, url=http://localhost:3000, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20220619 19:37:45.820" level="DEBUG">Creating session: alias</msg>
<status status="PASS" starttime="20220619 19:37:45.819" endtime="20220619 19:37:45.820"/>
</kw>
<kw name="Connect To Postgresql" library="DB">
<arg>hadb</arg>
<arg>ha</arg>
<arg>password2021dljfklkla1!kljf;</arg>
<arg>localhost</arg>
<arg>8432</arg>
<doc>Connection to Postgres DB.</doc>
<msg timestamp="20220619 19:37:45.820" level="DEBUG">Connecting using : dbhost=localhost, dbport=8432, dbname=hadb, dbusername=ha, dbpassword=password2021dljfklkla1!kljf;, alias=None</msg>
<status status="PASS" starttime="20220619 19:37:45.820" endtime="20220619 19:37:45.826"/>
</kw>
<status status="PASS" starttime="20220619 19:37:45.819" endtime="20220619 19:37:45.826"/>
</kw>
<kw name="Get Firstname From PostRest">
<var>${firstname}</var>
<arg>${POSTGREST_PARAMS}</arg>
<kw name="GET On Session" library="Req">
<var>${resp}</var>
<arg>alias</arg>
<arg>customers</arg>
<arg>params=${filter}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<msg timestamp="20220619 19:37:45.839" level="DEBUG">Starting new HTTP connection (1): localhost:3000</msg>
<msg timestamp="20220619 19:37:45.889" level="DEBUG">http://localhost:3000 "GET /customers?age=lt.21&amp;select=age,firstname,products!inner(title)&amp;products.title=like.%25FISH%25 HTTP/1.1" 200 None</msg>
<msg timestamp="20220619 19:37:45.890" level="INFO">GET Request : url=http://localhost:3000/customers?age=lt.21&amp;select=age,firstname,products!inner(title)&amp;products.title=like.%25FISH%25 
 path_url=/customers?age=lt.21&amp;select=age,firstname,products!inner(title)&amp;products.title=like.%25FISH%25 
 headers={'User-Agent': 'python-requests/2.28.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20220619 19:37:45.890" level="INFO">GET Response : url=http://localhost:3000/customers?age=lt.21&amp;select=age,firstname,products!inner(title)&amp;products.title=like.%25FISH%25 
 status=200, reason=OK 
 headers={'Transfer-Encoding': 'chunked', 'Date': 'Sun, 19 Jun 2022 16:37:45 GMT', 'Server': 'postgrest/9.0.0', 'Content-Range': '0-4/*', 'Content-Location': '/customers?age=lt.21&amp;products.title=like.%25FISH%25&amp;select=age%2Cfirstname%2Cproducts%21inner%28title%29', 'Content-Type': 'application/json; charset=utf-8'} 
 body=[{"age":20,"firstname":"LGYCHT","products":[{"title":"AFFAIR FISH"}]}, 
 {"age":20,"firstname":"GCDLEP","products":[{"title":"AGENT FISH"}]}, 
 {"age":18,"firstname":"TMTSLG","products":[{"title":"ACE FISH"}]}, 
 {"age":18,"firstname":"MPBIQS","products":[{"title":"ADAPTATION FISH"}]}, 
 {"age":19,"firstname":"NTCKLG","products":[{"title":"ALADDIN FISH"}]}] 
 </msg>
<msg timestamp="20220619 19:37:45.890" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220619 19:37:45.827" endtime="20220619 19:37:45.890"/>
</kw>
<kw name="Get Elements" library="Js">
<var>${firstname}</var>
<arg>${resp.json()}</arg>
<arg>$..firstname</arg>
<doc>Get list of elements from _json_source_, matching [http://goessner.net/articles/JsonPath/|JSONPath] expression.</doc>
<msg timestamp="20220619 19:37:46.030" level="INFO">${firstname} = ['LGYCHT', 'GCDLEP', 'TMTSLG', 'MPBIQS', 'NTCKLG']</msg>
<status status="PASS" starttime="20220619 19:37:45.891" endtime="20220619 19:37:46.030"/>
</kw>
<msg timestamp="20220619 19:37:46.032" level="INFO">${firstname} = ['LGYCHT', 'GCDLEP', 'TMTSLG', 'MPBIQS', 'NTCKLG']</msg>
<status status="PASS" starttime="20220619 19:37:45.826" endtime="20220619 19:37:46.032"/>
</kw>
<kw name="Get Firstname From DB">
<var>@{result}</var>
<arg>&amp;{DB_PARAMS}</arg>
<kw name="Create Dictionary" library="BuiltIn">
<var>${params}</var>
<arg>&amp;{dict_params}</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20220619 19:37:46.034" level="INFO">${params} = {'age': '21', 'title': '%FISH%'}</msg>
<status status="PASS" starttime="20220619 19:37:46.032" endtime="20220619 19:37:46.034"/>
</kw>
<kw name="Execute Sql String Mapped" library="DB">
<var>@{result}</var>
<arg>${SQL}</arg>
<arg>&amp;{params}</arg>
<doc>SQL query execution where each result row is mapped as a dict with column names as keys.</doc>
<msg timestamp="20220619 19:37:46.034" level="INFO" html="true">&lt;details&gt;&lt;summary&gt;Running PL/PGSQL statement&lt;/summary&gt;&lt;p&gt;SELECT age, firstname, title FROM bootcamp.customers JOIN bootcamp.cust_hist USING(customerid) JOIN bootcamp.products USING(prod_id) WHERE age&amp;lt;%(age)s AND title LIKE %(title)s&lt;/p&gt;&lt;/details&gt;</msg>
<msg timestamp="20220619 19:37:46.068" level="INFO" html="true">&lt;details&gt;&lt;summary&gt;SQL Query Result&lt;/summary&gt;&lt;p&gt;[{&amp;#x27;age&amp;#x27;: 18, &amp;#x27;firstname&amp;#x27;: &amp;#x27;TMTSLG&amp;#x27;, &amp;#x27;title&amp;#x27;: &amp;#x27;ACE FISH&amp;#x27;}, {&amp;#x27;age&amp;#x27;: 20, &amp;#x27;firstname&amp;#x27;: &amp;#x27;LGYCHT&amp;#x27;, &amp;#x27;title&amp;#x27;: &amp;#x27;AFFAIR FISH&amp;#x27;}, {&amp;#x27;age&amp;#x27;: 20, &amp;#x27;firstname&amp;#x27;: &amp;#x27;GCDLEP&amp;#x27;, &amp;#x27;title&amp;#x27;: &amp;#x27;AGENT FISH&amp;#x27;}, {&amp;#x27;age&amp;#x27;: 19, &amp;#x27;firstname&amp;#x27;: &amp;#x27;NTCKLG&amp;#x27;, &amp;#x27;title&amp;#x27;: &amp;#x27;ALADDIN FISH&amp;#x27;}, {&amp;#x27;age&amp;#x27;: 18, &amp;#x27;firstname&amp;#x27;: &amp;#x27;MPBIQS&amp;#x27;, &amp;#x27;title&amp;#x27;: &amp;#x27;ADAPTATION FISH&amp;#x27;}]&lt;/p&gt;&lt;/details&gt;</msg>
<msg timestamp="20220619 19:37:46.069" level="INFO">@{result} = [ {'age': 18, 'firstname': 'TMTSLG', 'title': 'ACE FISH'} | {'age': 20, 'firstname': 'LGYCHT', 'title': 'AFFAIR FISH'} | {'age': 20, 'firstname': 'GCDLEP', 'title': 'AGENT FISH'} | {'age': 19, 'firstn...</msg>
<status status="PASS" starttime="20220619 19:37:46.034" endtime="20220619 19:37:46.069"/>
</kw>
<msg timestamp="20220619 19:37:46.069" level="INFO">@{result} = [ {'age': 18, 'firstname': 'TMTSLG', 'title': 'ACE FISH'} | {'age': 20, 'firstname': 'LGYCHT', 'title': 'AFFAIR FISH'} | {'age': 20, 'firstname': 'GCDLEP', 'title': 'AGENT FISH'} | {'age': 19, 'firstn...</msg>
<status status="PASS" starttime="20220619 19:37:46.032" endtime="20220619 19:37:46.069"/>
</kw>
<kw name="Compare Result">
<arg>${result}</arg>
<arg>${firstname}</arg>
<kw name="Create List" library="BuiltIn">
<var>${firstnames_db}</var>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20220619 19:37:46.070" level="INFO">${firstnames_db} = []</msg>
<status status="PASS" starttime="20220619 19:37:46.070" endtime="20220619 19:37:46.070"/>
</kw>
<for flavor="IN">
<var>${i}</var>
<value>@{res_from_db}</value>
<iter>
<var name="${i}">{'age': 18, 'firstname': 'TMTSLG', 'title': 'ACE FISH'}</var>
<kw name="Append To List" library="Col">
<arg>${firstnames_db}</arg>
<arg>${i}[firstname]</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20220619 19:37:46.071" endtime="20220619 19:37:46.071"/>
</kw>
<status status="PASS" starttime="20220619 19:37:46.071" endtime="20220619 19:37:46.071"/>
</iter>
<iter>
<var name="${i}">{'age': 20, 'firstname': 'LGYCHT', 'title': 'AFFAIR FISH'}</var>
<kw name="Append To List" library="Col">
<arg>${firstnames_db}</arg>
<arg>${i}[firstname]</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20220619 19:37:46.071" endtime="20220619 19:37:46.072"/>
</kw>
<status status="PASS" starttime="20220619 19:37:46.071" endtime="20220619 19:37:46.072"/>
</iter>
<iter>
<var name="${i}">{'age': 20, 'firstname': 'GCDLEP', 'title': 'AGENT FISH'}</var>
<kw name="Append To List" library="Col">
<arg>${firstnames_db}</arg>
<arg>${i}[firstname]</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20220619 19:37:46.073" endtime="20220619 19:37:46.073"/>
</kw>
<status status="PASS" starttime="20220619 19:37:46.072" endtime="20220619 19:37:46.073"/>
</iter>
<iter>
<var name="${i}">{'age': 19, 'firstname': 'NTCKLG', 'title': 'ALADDIN FISH'}</var>
<kw name="Append To List" library="Col">
<arg>${firstnames_db}</arg>
<arg>${i}[firstname]</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20220619 19:37:46.074" endtime="20220619 19:37:46.075"/>
</kw>
<status status="PASS" starttime="20220619 19:37:46.074" endtime="20220619 19:37:46.075"/>
</iter>
<iter>
<var name="${i}">{'age': 18, 'firstname': 'MPBIQS', 'title': 'ADAPTATION FISH'}</var>
<kw name="Append To List" library="Col">
<arg>${firstnames_db}</arg>
<arg>${i}[firstname]</arg>
<doc>Adds ``values`` to the end of ``list``.</doc>
<status status="PASS" starttime="20220619 19:37:46.075" endtime="20220619 19:37:46.075"/>
</kw>
<status status="PASS" starttime="20220619 19:37:46.075" endtime="20220619 19:37:46.075"/>
</iter>
<status status="PASS" starttime="20220619 19:37:46.070" endtime="20220619 19:37:46.075"/>
</for>
<kw name="Lists Should Be Equal" library="Col">
<arg>${firstnames_db}</arg>
<arg>${firstnames}</arg>
<arg>ignore_order=True</arg>
<doc>Fails if given lists are unequal.</doc>
<status status="PASS" starttime="20220619 19:37:46.076" endtime="20220619 19:37:46.077"/>
</kw>
<status status="PASS" starttime="20220619 19:37:46.069" endtime="20220619 19:37:46.078"/>
</kw>
<kw name="Test Teardown" library="resource" type="TEARDOWN">
<kw name="Delete All Sessions" library="Req">
<doc>Removes all the session objects</doc>
<msg timestamp="20220619 19:37:46.081" level="INFO">Deleting All Sessions</msg>
<status status="PASS" starttime="20220619 19:37:46.081" endtime="20220619 19:37:46.081"/>
</kw>
<kw name="Disconnect From Postgresql" library="DB">
<doc>Close active PostgreSQL connection.
You will have to manually open or switch to a new connection.
Due to how ConnectionCache works, connection's index and alias are not removed from cache, so you are able to switch to
closed connection, if it was closed with Disconnect from Postgresql. It will still remain closed though.</doc>
<status status="PASS" starttime="20220619 19:37:46.081" endtime="20220619 19:37:46.084"/>
</kw>
<status status="PASS" starttime="20220619 19:37:46.078" endtime="20220619 19:37:46.085"/>
</kw>
<doc>Проверка поиска данных из нескольких таблиц</doc>
<status status="PASS" starttime="20220619 19:37:45.813" endtime="20220619 19:37:46.085"/>
</test>
<meta name="Автор">Андрей Кан</meta>
<status status="PASS" starttime="20220619 19:37:45.492" endtime="20220619 19:37:46.086"/>
</suite>
<status status="PASS" starttime="20220619 19:37:45.383" endtime="20220619 19:37:46.090"/>
</suite>
<statistics>
<total>
<stat pass="1" fail="0" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="1" fail="0" skip="0" id="s1" name="RF2">RF2</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1" name="Test Search Many Tables">RF2.Test Search Many Tables</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
